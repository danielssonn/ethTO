/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers'
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from '@ethersproject/abi'
import type { Listener, Provider } from '@ethersproject/providers'
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from '../../common'

export declare namespace INFTMarket {
  export type NFTListingStruct = {
    lender: PromiseOrValue<string>
    nftAddress: PromiseOrValue<string>
    tokenId: PromiseOrValue<BigNumberish>
    maximumEndTime: PromiseOrValue<BigNumberish>
    minimumDuration: PromiseOrValue<BigNumberish>
    createTime: PromiseOrValue<BigNumberish>
    nonce: PromiseOrValue<BigNumberish>
  }

  export type NFTListingStructOutput = [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    lender: string
    nftAddress: string
    tokenId: BigNumber
    maximumEndTime: BigNumber
    minimumDuration: BigNumber
    createTime: BigNumber
    nonce: BigNumber
  }
}

export interface INFTMarketInterface extends utils.Interface {
  functions: {
    'cancelNFTListing(address,uint256)': FunctionFragment
    'getListing(address,uint256)': FunctionFragment
    'listNFT(address,uint256,uint64,uint64,uint256,address)': FunctionFragment
    'rentNFT(address,uint256,uint64,uint64,uint256,address)': FunctionFragment
    'returnRentedNFT(address,address,uint256)': FunctionFragment
  }

  getFunction(
    nameOrSignatureOrTopic:
      | 'cancelNFTListing'
      | 'getListing'
      | 'listNFT'
      | 'rentNFT'
      | 'returnRentedNFT'
  ): FunctionFragment

  encodeFunctionData(
    functionFragment: 'cancelNFTListing',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'getListing',
    values: [PromiseOrValue<string>, PromiseOrValue<BigNumberish>]
  ): string
  encodeFunctionData(
    functionFragment: 'listNFT',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'rentNFT',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string
  encodeFunctionData(
    functionFragment: 'returnRentedNFT',
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>
    ]
  ): string

  decodeFunctionResult(
    functionFragment: 'cancelNFTListing',
    data: BytesLike
  ): Result
  decodeFunctionResult(functionFragment: 'getListing', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'listNFT', data: BytesLike): Result
  decodeFunctionResult(functionFragment: 'rentNFT', data: BytesLike): Result
  decodeFunctionResult(
    functionFragment: 'returnRentedNFT',
    data: BytesLike
  ): Result

  events: {
    'CancelNFTListing(address,address,uint256)': EventFragment
    'ListNFT(address,address,uint256,uint64,uint64,uint256,address)': EventFragment
    'RentNFT(address,address,address,uint256,uint64,uint64,uint256,address)': EventFragment
  }

  getEvent(nameOrSignatureOrTopic: 'CancelNFTListing'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'ListNFT'): EventFragment
  getEvent(nameOrSignatureOrTopic: 'RentNFT'): EventFragment
}

export interface CancelNFTListingEventObject {
  lender: string
  nftAddress: string
  tokenId: BigNumber
}
export type CancelNFTListingEvent = TypedEvent<
  [string, string, BigNumber],
  CancelNFTListingEventObject
>

export type CancelNFTListingEventFilter =
  TypedEventFilter<CancelNFTListingEvent>

export interface ListNFTEventObject {
  lender: string
  nftAddress: string
  tokenId: BigNumber
  minimumDuration: BigNumber
  maximumEndTime: BigNumber
  pricePerDay: BigNumber
  paymentToken: string
}
export type ListNFTEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber, string],
  ListNFTEventObject
>

export type ListNFTEventFilter = TypedEventFilter<ListNFTEvent>

export interface RentNFTEventObject {
  renter: string
  lender: string
  nftAddress: string
  tokenId: BigNumber
  startTime: BigNumber
  endTime: BigNumber
  pricePerDay: BigNumber
  paymentToken: string
}
export type RentNFTEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber, string],
  RentNFTEventObject
>

export type RentNFTEventFilter = TypedEventFilter<RentNFTEvent>

export interface INFTMarket extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this
  attach(addressOrName: string): this
  deployed(): Promise<this>

  interface: INFTMarketInterface

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>
  listeners(eventName?: string): Array<Listener>
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this
  removeAllListeners(eventName?: string): this
  off: OnEvent<this>
  on: OnEvent<this>
  once: OnEvent<this>
  removeListener: OnEvent<this>

  functions: {
    cancelNFTListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    getListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[INFTMarket.NFTListingStructOutput]>

    listNFT(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      minimumDuration: PromiseOrValue<BigNumberish>,
      maximumEndTime: PromiseOrValue<BigNumberish>,
      pricePerDay: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    rentNFT(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      maximumEndTime: PromiseOrValue<BigNumberish>,
      minimumDuration: PromiseOrValue<BigNumberish>,
      pricePerDay: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>

    returnRentedNFT(
      renter: PromiseOrValue<string>,
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>
  }

  cancelNFTListing(
    nftAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  getListing(
    nftAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<INFTMarket.NFTListingStructOutput>

  listNFT(
    nftAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    minimumDuration: PromiseOrValue<BigNumberish>,
    maximumEndTime: PromiseOrValue<BigNumberish>,
    pricePerDay: PromiseOrValue<BigNumberish>,
    paymentToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  rentNFT(
    nftAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    maximumEndTime: PromiseOrValue<BigNumberish>,
    minimumDuration: PromiseOrValue<BigNumberish>,
    pricePerDay: PromiseOrValue<BigNumberish>,
    paymentToken: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  returnRentedNFT(
    renter: PromiseOrValue<string>,
    nftAddress: PromiseOrValue<string>,
    tokenId: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>

  callStatic: {
    cancelNFTListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>

    getListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<INFTMarket.NFTListingStructOutput>

    listNFT(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      minimumDuration: PromiseOrValue<BigNumberish>,
      maximumEndTime: PromiseOrValue<BigNumberish>,
      pricePerDay: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    rentNFT(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      maximumEndTime: PromiseOrValue<BigNumberish>,
      minimumDuration: PromiseOrValue<BigNumberish>,
      pricePerDay: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>

    returnRentedNFT(
      renter: PromiseOrValue<string>,
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>
  }

  filters: {
    'CancelNFTListing(address,address,uint256)'(
      lender?: null,
      nftAddress?: null,
      tokenId?: null
    ): CancelNFTListingEventFilter
    CancelNFTListing(
      lender?: null,
      nftAddress?: null,
      tokenId?: null
    ): CancelNFTListingEventFilter

    'ListNFT(address,address,uint256,uint64,uint64,uint256,address)'(
      lender?: null,
      nftAddress?: null,
      tokenId?: null,
      minimumDuration?: null,
      maximumEndTime?: null,
      pricePerDay?: null,
      paymentToken?: null
    ): ListNFTEventFilter
    ListNFT(
      lender?: null,
      nftAddress?: null,
      tokenId?: null,
      minimumDuration?: null,
      maximumEndTime?: null,
      pricePerDay?: null,
      paymentToken?: null
    ): ListNFTEventFilter

    'RentNFT(address,address,address,uint256,uint64,uint64,uint256,address)'(
      renter?: null,
      lender?: null,
      nftAddress?: null,
      tokenId?: null,
      startTime?: null,
      endTime?: null,
      pricePerDay?: null,
      paymentToken?: null
    ): RentNFTEventFilter
    RentNFT(
      renter?: null,
      lender?: null,
      nftAddress?: null,
      tokenId?: null,
      startTime?: null,
      endTime?: null,
      pricePerDay?: null,
      paymentToken?: null
    ): RentNFTEventFilter
  }

  estimateGas: {
    cancelNFTListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    getListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>

    listNFT(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      minimumDuration: PromiseOrValue<BigNumberish>,
      maximumEndTime: PromiseOrValue<BigNumberish>,
      pricePerDay: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    rentNFT(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      maximumEndTime: PromiseOrValue<BigNumberish>,
      minimumDuration: PromiseOrValue<BigNumberish>,
      pricePerDay: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>

    returnRentedNFT(
      renter: PromiseOrValue<string>,
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>
  }

  populateTransaction: {
    cancelNFTListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    getListing(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>

    listNFT(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      minimumDuration: PromiseOrValue<BigNumberish>,
      maximumEndTime: PromiseOrValue<BigNumberish>,
      pricePerDay: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    rentNFT(
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      maximumEndTime: PromiseOrValue<BigNumberish>,
      minimumDuration: PromiseOrValue<BigNumberish>,
      pricePerDay: PromiseOrValue<BigNumberish>,
      paymentToken: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>

    returnRentedNFT(
      renter: PromiseOrValue<string>,
      nftAddress: PromiseOrValue<string>,
      tokenId: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>
  }
}
